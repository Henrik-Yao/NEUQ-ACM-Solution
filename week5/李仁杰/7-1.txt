#include <iostream>
#include <set>
#include <map>
#include <queue>
#include <vector>
#include <algorithm>
using namespace std;

struct P
{
    int f = -1;
    int m = -1;
    char s;
} p[100005];

int visit[100005], flag = 1;

void dfs1(int a, int t, int g)
{
    if (g >= 5 || a == -1) return;
    int f = p[a].f, m = p[a].m;
    if (f != -1)
    {
        visit[f] = t;
        dfs1(f, t, g + 1);
    }
    if (m != -1)
    {
        visit[m] = t;
        dfs1(m, t, g + 1);
    }
}

void dfs2(int a, int t, int g)
{
    if (!flag) return;
    if (g >= 5 || a == -1) return;
    int f = p[a].f, m = p[a].m;
    if (f != -1)
    {
        if (visit[f] == t) {
            flag = 0;
            return;
        }
        dfs2(f, t, g + 1);
    }
    if (m != -1)
    {
        if(visit[m] == t){
            flag = 0;
            return;
        }
        dfs2(m, t, g + 1);
    }
}

int main()
{
    int m, n;
    cin >> m;
    for (int i = 0; i < m; i++)
    {
        int id, father, mather;
        char sex;
        cin >> id >> sex >> father >> mather;
        p[id].s = sex;
        p[id].f = father;
        p[father].s = 'M';
        p[id].m = mather;
        p[mather].s = 'F'; 
    }
    cin >> n;
    for (int i = 1; i <= n; i++)
    {
        int a, b;
        cin >> a >> b;
        if (p[a].s == p[b].s)
            cout << "Never Mind" << endl;
        else
        {
            dfs1(a, i, 1);
            dfs2(b, i, 1);
            if (flag) cout << "Yes" << endl;
            else cout << "No" << endl;
            flag = 1;
        }
    }
}